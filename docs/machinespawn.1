.\" Automatically generated by Pandoc 2.19.2
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "MACHINESPAWN" "1" "November 17, 2022" "machinespawn" "machinespawn Manual"
.hy
.SH Machinespawn
.PP
Quickly stand up systemd_nspawn containers
.SS Introduction
.PP
A nifty and performant way to quickly create, stand up or manage
\f[V]systemd-nspawn\f[R] (https://www.freedesktop.org/software/systemd/man/systemd-nspawn.html)
containers, \f[V]machinespawn\f[R] uses
\f[V]debootstrap\f[R] (https://wiki.debian.org/Debootstrap) and
\f[V]machinectl\f[R] (https://www.freedesktop.org/software/systemd/man/machinectl.html)
and
\f[V]systemd-nspawn\f[R] (https://www.freedesktop.org/software/systemd/man/systemd-nspawn.html)
to build run and remove minimal OS images.
It is useful for that, and also as a stage to quickly build custom
container or ISO images.
.PP
This project is currently a work-in-progress \[u1F6A7] and under active
development so treat as alpha software and approach with caution
\[u1F6D1] However \f[V]machinespawn\f[R] is already key part of the
Ubuntu Butterfly \[u1F98B] (https://github.com/butterfly-garden) build
process (https://github.com/butterfly-garden/image-build).
.SS Participate
.PP
We have a Discord for this project:
[IMAGE: Discord (https://img.shields.io/discord/712850672223125565?color=0C306A&label=WimpysWorld%20Discord&logo=Discord&logoColor=ffffff&style=flat-square)] (https://discord.gg/sNmz3uw)
.PP
To see it in action, or to watch it becoming, you can watch these videos
where I go from an idea to a working full-featured prototype of
\f[V]machinespawn\f[R].
.PP
[IMAGE: machinespawn!
\[u1F427] Dev tooling from concept to production
\[u1F9D1]\[u200D]\[u1F4BB] (https://img.youtube.com/vi/-bQQ6QlXpJQ/0.jpg)] (https://www.youtube.com/watch?v=-bQQ6QlXpJQ)
.PP
I live stream the development of \f[V]machinespawn\f[R] and other
project on Wimpy\[cq]s World Twitch
channel (https://twitch.tv/WimpysWorld).
.SS Requirements
.PP
This script relies on utilities, many of which are typically already
installed on most Debian or Ubuntu systems.
The following will ensure you have all you need:
.IP
.nf
\f[C]
sudo apt-get install debootstrap binutils iproute2 systemd-container wget
\f[R]
.fi
.SS Caching Proxy \f[I](optional)\f[R]
.PP
If \f[V]apt-cacher-ng\f[R] is installed on the host
\f[V]machinespawn\f[R] will automatically detect its presence and use it
for container bootstrapping and executing commands inside the container
with \f[V]run\f[R].
Install and configure \f[V]apt-cache-ng\f[R] as follows:
.IP
.nf
\f[C]
sudo apt-get install apt-cacher-ng
\f[R]
.fi
.PP
Create \f[V]/etc/apt-cacher-ng/zz_debconf.conf\f[R] with the following
in it:
.IP
.nf
\f[C]
PassThroughPattern: .*
\f[R]
.fi
.PP
Once the above \f[V]PassThroughPattern\f[R] is set,
\f[V]apt-cacher-ng\f[R] will proxy but not cache objects stored on
SSL/TLS repositories.
.SS Supported distros
.PP
Currently the following distros are supported:
.IP \[bu] 2
Debian Releases
.RS 2
.IP \[bu] 2
8 (jessie)
.IP \[bu] 2
9 (stretch)
.IP \[bu] 2
10 (buster)
.IP \[bu] 2
11 (bullseye)
.IP \[bu] 2
12 (bookworm)
.RE
.IP \[bu] 2
Ubuntu Releases
.RS 2
.IP \[bu] 2
16.04 (xenial)
.IP \[bu] 2
18.04 (bionic)
.IP \[bu] 2
20.04 (focal)
.IP \[bu] 2
22.04 (jammy)
.IP \[bu] 2
22.10 (kinetic)
.RE
.SS Architecture Support
.PP
Containers can be built for the host architecture or cross-bootstrapped
for the following machine architectures:
.IP \[bu] 2
amd64
.IP \[bu] 2
i386
.IP \[bu] 2
armhf
.IP \[bu] 2
arm64
.SH Usage
.PP
\f[V]machinespawn\f[R] currently needs to be run as root via
\f[V]sudo\f[R]
.IP
.nf
\f[C]
sudo machinespawn [command]
\f[R]
.fi
.SS Commands
.SS \f[V]bootstrap\f[R]
.PP
Build a machine from scratch.
.PP
The first build of a machine type and architecture may be quite heavy on
time and resource usage, but intelligent caching, together with
detection and use of local package caching proxies, should make this as
efficient as possible and significantly reduce subsequent builds or
re-builds.
.PP
The following bootstrap a container called `bob' using Ubuntu 22.04
\f[I](Jammy Jellyfish)\f[R] as the base.
.IP
.nf
\f[C]
sudo machinespawn ubuntu-22.04 bob
\f[R]
.fi
.PP
Here\[cq]s an example that would bootstrap a Debian 11 container called
`fred':
.IP
.nf
\f[C]
sudo machinespawn debian-11 fred
\f[R]
.fi
.SS \f[V]list\f[R]
.PP
List the existing images (by default these will be found in
\f[V]/var/lib/machines/\f[R])
.SS \f[V]run\f[R]
.PP
Execute commands inside the container or start an interactive shell.
.IP
.nf
\f[C]
sudo machinespawn run bob /usr/bin/bash
\f[R]
.fi
.SS \f[V]clean-cache\f[R]
.PP
Remove cached content from \f[V]/var/cache/machinespawn\f[R].
This will release space taken by downloaded packages at the expense of
needing to re-download if required.
.SS \f[V]pull-tar\f[R]
.IP
.nf
\f[C]
machinespawn pull-tar <URL> <Machine Name>
\f[R]
.fi
.PP
Downloads a .tar container image from the specified URL, and makes it
available under the specified local machine name.
The URL must be of type \[lq]http://\[rq] or \[lq]https://\[rq], and
must refer to a .tar, .tar.gz, .tar.xz or .tar.bz2 archive file
.IP
.nf
\f[C]
sudo macheinespawn pull-tar  https://download.fedoraproject.org/pub/fedora/linux/releases/36/Cloud/x86_64/images/Fedora-Cloud-Base-36-1.5.x86_64.raw.xz FedoraCloudBase36
\f[R]
.fi
.SS \f[V]remove\f[R]
.PP
Completely remove a machine from \f[V]/var/lib/machines/\f[R]
.SS Reference
.IP \[bu] 2
debbootstrap (https://wiki.debian.org/Debootstrap)
.IP \[bu] 2
machinectl (https://www.freedesktop.org/software/systemd/man/machinectl.html)
.IP \[bu] 2
systemd-nspawn (https://www.freedesktop.org/software/systemd/man/systemd-nspawn.html)
.SH AUTHORS
Martin Wimpress.
